{
    "url": "https://microsoft.github.io/autogen/docs/tutorial/introduction",
    "title": "Introduction to AutoGen",
    "sections": [
        {
            "title": "",
            "content": [
                {
                    "text": "\n\nWelcome! AutoGen is an open-source framework that leverages multiple\nagents\nto enable complex workflows. This tutorial introduces basic\nconcepts and building blocks of AutoGen."
                }
            ],
            "subsections": []
        },
        {
            "title": "Why AutoGen?\n​",
            "content": [
                {
                    "text": "The whole is greater than the sum of its parts.\n-\nAristotle\n\nWhile there are many definitions of agents, in AutoGen, an agent is an\nentity that can send messages, receive messages and generate a reply\nusing models, tools, human inputs or a mixture of them. This abstraction\nnot only allows agents to model real-world and abstract entities, such\nas people and algorithms, but it also simplifies implementation of\ncomplex workflows as collaboration among agents.\n\nFurther, AutoGen is extensible and composable: you can extend a simple\nagent with customizable components and create workflows that can combine\nthese agents and power a more sophisticated agent, resulting in\nimplementations that are modular and easy to maintain.\n\nMost importantly, AutoGen is developed by a vibrant community of\nresearchers and engineers. It incorporates the latest research in\nmulti-agent systems and has been used in many real-world applications,\nincluding agent platform, advertising, AI employees, blog/article\nwriting, blockchain, calculate burned areas by wildfires, customer\nsupport, cybersecurity, data analytics, debate, education, finance,\ngaming, legal consultation, research, robotics, sales/marketing, social\nsimulation, software engineering, software security, supply chain,\nt-shirt design, training data generation, Youtube service…"
                }
            ],
            "subsections": []
        },
        {
            "title": "Installation\n​",
            "content": [
                {
                    "text": "The simplest way to install AutoGen is from pip:\npip install pyautogen\n. Find more options in\nInstallation\n."
                }
            ],
            "subsections": []
        },
        {
            "title": "Agents\n​",
            "content": [
                {
                    "text": "In AutoGen, an agent is an entity that can send and receive messages to\nand from other agents in its environment. An agent can be powered by\nmodels (such as a large language model like GPT-4), code executors (such\nas an IPython kernel), human, or a combination of these and other\npluggable and customizable components.\n\n\n\nAn example of such agents is the built-in\nConversableAgent\nwhich\nsupports the following components:\n\nYou can switch each component on or off and customize it to suit the\nneed of your application. For advanced users, you can add additional\ncomponents to the agent by using\nregistered_reply\n.\n\nLLMs, for example, enable agents to converse in natural languages and\ntransform between structured and unstructured text. The following\nexample shows a\nConversableAgent\nwith a GPT-4 LLM switched on and\nother components switched off:"
                },
                {
                    "code": {
                        "language": "python",
                        "script": "import\nos\nfrom\nautogen\nimport\nConversableAgent\nagent\n=\nConversableAgent\n(\n\"chatbot\"\n,\nllm_config\n=\n{\n\"config_list\"\n:\n[\n{\n\"model\"\n:\n\"gpt-4\"\n,\n\"api_key\"\n:\nos\n.\nenviron\n.\nget\n(\n\"OPENAI_API_KEY\"\n)\n}\n]\n}\n,\ncode_execution_config\n=\nFalse\n,\n# Turn off code execution, by default it is off.\nfunction_map\n=\nNone\n,\n# No registered functions, by default it is None.\nhuman_input_mode\n=\n\"NEVER\"\n,\n# Never ask for human input.\n)"
                    }
                },
                {
                    "text": "The\nllm_config\nargument contains a list of configurations for the\nLLMs. See\nLLM Configuration\nfor\nmore details.\n\nYou can ask this agent to generate a response to a question using the\ngenerate_reply\nmethod:"
                },
                {
                    "code": {
                        "language": "python",
                        "script": "reply\n=\nagent\n.\ngenerate_reply\n(\nmessages\n=\n[\n{\n\"content\"\n:\n\"Tell me a joke.\"\n,\n\"role\"\n:\n\"user\"\n}\n]\n)\nprint\n(\nreply\n)"
                    }
                },
                {
                    "code": {
                        "language": "text",
                        "script": "Sure, here's a light-hearted joke for you:\nWhy don't scientists trust atoms?\nBecause they make up everything!"
                    }
                }
            ],
            "subsections": []
        },
        {
            "title": "Roles and Conversations\n​",
            "content": [
                {
                    "text": "In AutoGen, you can assign roles to agents and have them participate in\nconversations or chat with each other. A conversation is a sequence of\nmessages exchanged between agents. You can then use these conversations\nto make progress on a task. For example, in the example below, we assign\ndifferent roles to two agents by setting their\nsystem_message\n."
                },
                {
                    "code": {
                        "language": "python",
                        "script": "cathy\n=\nConversableAgent\n(\n\"cathy\"\n,\nsystem_message\n=\n\"Your name is Cathy and you are a part of a duo of comedians.\"\n,\nllm_config\n=\n{\n\"config_list\"\n:\n[\n{\n\"model\"\n:\n\"gpt-4\"\n,\n\"temperature\"\n:\n0.9\n,\n\"api_key\"\n:\nos\n.\nenviron\n.\nget\n(\n\"OPENAI_API_KEY\"\n)\n}\n]\n}\n,\nhuman_input_mode\n=\n\"NEVER\"\n,\n# Never ask for human input.\n)\njoe\n=\nConversableAgent\n(\n\"joe\"\n,\nsystem_message\n=\n\"Your name is Joe and you are a part of a duo of comedians.\"\n,\nllm_config\n=\n{\n\"config_list\"\n:\n[\n{\n\"model\"\n:\n\"gpt-4\"\n,\n\"temperature\"\n:\n0.7\n,\n\"api_key\"\n:\nos\n.\nenviron\n.\nget\n(\n\"OPENAI_API_KEY\"\n)\n}\n]\n}\n,\nhuman_input_mode\n=\n\"NEVER\"\n,\n# Never ask for human input.\n)"
                    }
                },
                {
                    "text": "Now that we have two comedian agents, we can ask them to start a comedy\nshow. This can be done using the\ninitiate_chat\nmethod. We set the\nmax_turns\nto 2 to keep the conversation short."
                },
                {
                    "code": {
                        "language": "python",
                        "script": "result\n=\njoe\n.\ninitiate_chat\n(\ncathy\n,\nmessage\n=\n\"Cathy, tell me a joke.\"\n,\nmax_turns\n=\n2\n)"
                    }
                },
                {
                    "code": {
                        "language": "text",
                        "script": "joe\n(\nto\ncathy\n)\n:\nCathy, tell me a joke.\n--------------------------------------------------------------------------------\ncathy\n(\nto\njoe\n)\n:\nSure, here's one for you:\nWhy don't scientists trust atoms?\nBecause they make up everything!\n--------------------------------------------------------------------------------\njoe\n(\nto\ncathy\n)\n:\nHaha, that's a good one, Cathy! Okay, my turn.\nWhy don't we ever tell secrets on a farm?\nBecause the potatoes have eyes, the corn has ears, and the beans stalk.\n--------------------------------------------------------------------------------\ncathy\n(\nto\njoe\n)\n:\nHaha, that's a great one! A farm is definitely not the place for secrets. Okay, my turn again.\nWhy couldn't the bicycle stand up by itself?\nBecause it was two-tired!\n--------------------------------------------------------------------------------"
                    }
                },
                {
                    "text": "The comedians are bouncing off each other!"
                }
            ],
            "subsections": []
        },
        {
            "title": "Summary\n​",
            "content": [
                {
                    "text": "In this chapter, we introduced the concept of agents, roles and\nconversations in AutoGen. For simplicity, we only used LLMs and created\nfully autonomous agents (\nhuman_input_mode\nwas set to\nNEVER\n). In the\nnext chapter, we will show how you can control when to\nterminate\na\nconversation between autonomous agents."
                }
            ],
            "subsections": []
        }
    ],
    "images": []
}