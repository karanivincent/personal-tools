{
    "url": "https://microsoft.github.io/autogen/docs/topics/code-execution/cli-code-executor",
    "title": "Command Line Code Executor",
    "sections": [
        {
            "title": "",
            "content": [
                {
                    "text": "\n\nCommand line code execution is the simplest form of code execution.\nGenerally speaking, it will save each code block to a file and the\nexecute that file. This means that each code block is executed in a new\nprocess. There are two forms of this executor:\n\nThis executor type is similar to the legacy code execution in AutoGen."
                }
            ],
            "subsections": []
        },
        {
            "title": "Docker\n​",
            "content": [
                {
                    "text": "The\nDockerCommandLineCodeExecutor\nwill create a Docker container and run all commands within that\ncontainer. The default image that is used is\npython:3-slim\n, this can\nbe customized by passing the\nimage\nparameter to the constructor. If\nthe image is not found locally then the class will try to pull it.\nTherefore, having built the image locally is enough. The only thing\nrequired for this image to be compatible with the executor is to have\nsh\nand\npython\ninstalled. Therefore, creating a custom image is a\nsimple and effective way to ensure required system dedendencies are\navailable.\n\nYou can use the executor as a context manager to ensure the container is\ncleaned up after use. Otherwise, the\natexit\nmodule will be used to\nstop the container when the program exits."
                }
            ],
            "subsections": [
                {
                    "title": "Inspecting the container\n​",
                    "content": [
                        {
                            "text": "If you wish to keep the container around after AutoGen is finished using\nit for whatever reason (e.g. to inspect the container), then you can set\nthe\nauto_remove\nparameter to\nFalse\nwhen creating the executor.\nstop_container\ncan also be set to\nFalse\nto prevent the container\nfrom being stopped at the end of the execution."
                        }
                    ],
                    "subsections": []
                },
                {
                    "title": "Example\n​",
                    "content": [
                        {
                            "code": {
                                "language": "python",
                                "script": "from\npathlib\nimport\nPath\nfrom\nautogen\n.\ncoding\nimport\nCodeBlock\n,\nDockerCommandLineCodeExecutor\nwork_dir\n=\nPath\n(\n\"coding\"\n)\nwork_dir\n.\nmkdir\n(\nexist_ok\n=\nTrue\n)\nwith\nDockerCommandLineCodeExecutor\n(\nwork_dir\n=\nwork_dir\n)\nas\nexecutor\n:\nprint\n(\nexecutor\n.\nexecute_code_blocks\n(\ncode_blocks\n=\n[\nCodeBlock\n(\nlanguage\n=\n\"python\"\n,\ncode\n=\n\"print('Hello, World!')\"\n)\n,\n]\n)\n)"
                            }
                        },
                        {
                            "code": {
                                "language": "text",
                                "script": "exit_code=0 output='Hello, World!\\n' code_file='coding/tmp_code_07da107bb575cc4e02b0e1d6d99cc204.py'"
                            }
                        }
                    ],
                    "subsections": []
                }
            ]
        },
        {
            "title": "Local\n​",
            "content": [
                {
                    "text": "The local version will run code on your local system. Use it with caution.\n\nTo execute code on the host machine, as in the machine running AutoGen,\nthe\nLocalCommandLineCodeExecutor\ncan be used."
                }
            ],
            "subsections": []
        },
        {
            "title": "Using a Python virtual environment\n​",
            "content": [
                {
                    "text": "By default, the LocalCommandLineCodeExecutor executes code and installs\ndependencies within the same Python environment as the AutoGen code. You\nhave the option to specify a Python virtual environment to prevent\npolluting the base Python environment."
                }
            ],
            "subsections": []
        },
        {
            "title": "Assigning to an agent\n​",
            "content": [
                {
                    "text": "These executors can be used to facilitate the execution of agent written\ncode."
                },
                {
                    "code": {
                        "language": "python",
                        "script": "from\npathlib\nimport\nPath\nfrom\nautogen\nimport\nConversableAgent\nfrom\nautogen\n.\ncoding\nimport\nDockerCommandLineCodeExecutor\nwork_dir\n=\nPath\n(\n\"coding\"\n)\nwork_dir\n.\nmkdir\n(\nexist_ok\n=\nTrue\n)\nexecutor\n=\nDockerCommandLineCodeExecutor\n(\nwork_dir\n=\nwork_dir\n)\ncode_executor_agent\n=\nConversableAgent\n(\nname\n=\n\"code_executor_agent\"\n,\nllm_config\n=\nFalse\n,\ncode_execution_config\n=\n{\n\"executor\"\n:\nexecutor\n,\n}\n,\nhuman_input_mode\n=\n\"NEVER\"\n,\n)"
                    }
                },
                {
                    "text": "When using code execution it is critical that you update the system\nprompt of agents you expect to write code to be able to make use of the\nexecutor. For example, for the\nDockerCommandLineCodeExecutor\nyou might setup a code writing agent like so:"
                },
                {
                    "code": {
                        "language": "python",
                        "script": "# The code writer agent's system message is to instruct the LLM on how to\n# use the Jupyter code executor with IPython kernel.\ncode_writer_system_message\n=\n\"\"\"\nYou have been given coding capability to solve tasks using Python code.\nIn the following cases, suggest python code (in a python coding block) or shell script (in a sh coding block) for the user to execute.\n1. When you need to collect info, use the code to output the info you need, for example, browse or search the web, download/read a file, print the content of a webpage or a file, get the current date/time, check the operating system. After sufficient info is printed and the task is ready to be solved based on your language skill, you can solve the task by yourself.\n2. When you need to perform some task with code, use the code to perform the task and output the result. Finish the task smartly.\nSolve the task step by step if you need to. If a plan is not provided, explain your plan first. Be clear which step uses code, and which step uses your language skill.\nWhen using code, you must indicate the script type in the code block. The user cannot provide any other feedback or perform any other action beyond executing the code you suggest. The user can't modify your code. So do not suggest incomplete code which requires users to modify. Don't use a code block if it's not intended to be executed by the user.\nIf you want the user to save the code in a file before executing it, put # filename: <filename> inside the code block as the first line. Don't include multiple code blocks in one response. Do not ask users to copy and paste the result. Instead, use 'print' function for the output when relevant. Check the execution result returned by the user.\n\"\"\"\nimport\nos\ncode_writer_agent\n=\nConversableAgent\n(\n\"code_writer\"\n,\nsystem_message\n=\ncode_writer_system_message\n,\nllm_config\n=\n{\n\"config_list\"\n:\n[\n{\n\"model\"\n:\n\"gpt-4\"\n,\n\"api_key\"\n:\nos\n.\nenviron\n[\n\"OPENAI_API_KEY\"\n]\n}\n]\n}\n,\ncode_execution_config\n=\nFalse\n,\n# Turn off code execution for this agent.\nmax_consecutive_auto_reply\n=\n2\n,\nhuman_input_mode\n=\n\"NEVER\"\n,\n)"
                    }
                },
                {
                    "text": "Then we can use these two agents to solve a problem:"
                },
                {
                    "code": {
                        "language": "python",
                        "script": "import\npprint\nchat_result\n=\ncode_executor_agent\n.\ninitiate_chat\n(\ncode_writer_agent\n,\nmessage\n=\n\"Write Python code to calculate the 14th Fibonacci number.\"\n)\npprint\n.\npprint\n(\nchat_result\n)"
                    }
                },
                {
                    "code": {
                        "language": "text",
                        "script": "code_executor_agent\n(\nto\ncode_writer\n)\n:\nWrite Python code to calculate the 14th Fibonacci number.\n--------------------------------------------------------------------------------\ncode_writer\n(\nto\ncode_executor_agent\n)\n:\nSure, we can calculate the Fibonacci series using a few different methods such as recursion, iterative, by using Binet's formula, or by using matrix exponentiation.\nBut, since we only need to calculate the 14th number, we will simply use the iterative method as it's the most efficient for this case.\nHere is the Python code that solves the task:\n```python\ndef fibonacci(n):\na, b = 0, 1\nfor _ in range(n):\na, b = b, a + b\nreturn a\nprint(fibonacci(14))\n```\nIn this script, `fibonacci(n)` is a function that calculates the nth Fibonacci number. Inside the function, two variables `a` and `b` are initialised to `0` and `1` which are the first two numbers in the Fibonacci series. Then, a loop runs `n` times (14 times in your case), and in each iteration `a` is replaced with `b` and `b` is replaced with `a + b`, which generates the next number in the series.\nThe function returns `a`, which is the nth Fibonacci number. The result is then printed to the console.\n--------------------------------------------------------------------------------\n>>>>>>>> EXECUTING 1 CODE BLOCKS (inferred languages are [python])...\ncode_executor_agent\n(\nto\ncode_writer\n)\n:\nexitcode: 0 (execution succeeded)\nCode output: 377\n--------------------------------------------------------------------------------\ncode_writer\n(\nto\ncode_executor_agent\n)\n:\nGreat! The script has successfully computed the 14th Fibonacci number as 377. If you need to compute other Fibonacci numbers, you can simply change the argument in the `fibonacci()` function call. Please let me know if you need help with anything else.\n--------------------------------------------------------------------------------\ncode_executor_agent\n(\nto\ncode_writer\n)\n:\n--------------------------------------------------------------------------------\nChatResult(chat_id=None,\nchat_history=[{'content': 'Write Python code to calculate the 14th '\n'Fibonacci number.',\n'role': 'assistant'},\n{'content': 'Sure, we can calculate the Fibonacci '\n'series using a few different methods '\n'such as recursion, iterative, by using '\n\"Binet's formula, or by using matrix \"\n'exponentiation.\\n'\n'\\n'\n'But, since we only need to calculate the '\n'14th number, we will simply use the '\n\"iterative method as it's the most \"\n'efficient for this case.\\n'\n'\\n'\n'Here is the Python code that solves the '\n'task:\\n'\n'\\n'\n'```python\\n'\n'def fibonacci(n):\\n'\n'    a, b = 0, 1\\n'\n'    for _ in range(n):\\n'\n'        a, b = b, a + b\\n'\n'    return a\\n'\n'\\n'\n'print(fibonacci(14))\\n'\n'```\\n'\n'\\n'\n'In this script, `fibonacci(n)` is a '\n'function that calculates the nth '\n'Fibonacci number. Inside the function, '\n'two variables `a` and `b` are '\n'initialised to `0` and `1` which are the '\n'first two numbers in the Fibonacci '\n'series. Then, a loop runs `n` times (14 '\n'times in your case), and in each '\n'iteration `a` is replaced with `b` and '\n'`b` is replaced with `a + b`, which '\n'generates the next number in the '\n'series. \\n'\n'\\n'\n'The function returns `a`, which is the '\n'nth Fibonacci number. The result is then '\n'printed to the console.',\n'role': 'user'},\n{'content': 'exitcode: 0 (execution succeeded)\\n'\n'Code output: 377\\n',\n'role': 'assistant'},\n{'content': 'Great! The script has successfully '\n'computed the 14th Fibonacci number as '\n'377. If you need to compute other '\n'Fibonacci numbers, you can simply change '\n'the argument in the `fibonacci()` '\n'function call. Please let me know if you '\n'need help with anything else.',\n'role': 'user'},\n{'content': '', 'role': 'assistant'}],\nsummary='',\ncost=({'gpt-4-0613': {'completion_tokens': 302,\n'cost': 0.04842,\n'prompt_tokens': 1010,\n'total_tokens': 1312},\n'total_cost': 0.04842},\n{'gpt-4-0613': {'completion_tokens': 302,\n'cost': 0.04842,\n'prompt_tokens': 1010,\n'total_tokens': 1312},\n'total_cost': 0.04842}),\nhuman_input=[])"
                    }
                },
                {
                    "text": "Finally, stop the container. Or better yet use a context manager for it\nto be stopped automatically."
                },
                {
                    "code": {
                        "language": "python",
                        "script": "executor\n.\nstop\n(\n)"
                    }
                }
            ],
            "subsections": []
        }
    ],
    "images": []
}