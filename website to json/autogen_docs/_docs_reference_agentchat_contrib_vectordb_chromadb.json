{
    "url": "https://microsoft.github.io/autogen/docs/reference/agentchat/contrib/vectordb/chromadb",
    "title": "agentchat.contrib.vectordb.chromadb",
    "sections": [
        {
            "title": "ChromaVectorDB\n​",
            "content": [
                {
                    "code": {
                        "language": "python",
                        "script": "class\nChromaVectorDB\n(\nVectorDB\n)"
                    }
                },
                {
                    "text": "A vector database that uses ChromaDB as the backend."
                }
            ],
            "subsections": [
                {
                    "title": "__init__\n​",
                    "content": [
                        {
                            "code": {
                                "language": "python",
                                "script": "def\n__init__\n(\n*\n,\nclient\n=\nNone\n,\npath\n:\nstr\n=\n\"tmp/db\"\n,\nembedding_function\n:\nCallable\n=\nNone\n,\nmetadata\n:\ndict\n=\nNone\n,\n**\nkwargs\n)\n-\n>\nNone"
                            }
                        },
                        {
                            "text": "Initialize the vector database.\n\nArguments\n:\n\nReturns\n:\n\nNone"
                        }
                    ],
                    "subsections": []
                },
                {
                    "title": "create_collection\n​",
                    "content": [
                        {
                            "code": {
                                "language": "python",
                                "script": "def\ncreate_collection\n(\ncollection_name\n:\nstr\n,\noverwrite\n:\nbool\n=\nFalse\n,\nget_or_create\n:\nbool\n=\nTrue\n)\n-\n>\nCollection"
                            }
                        },
                        {
                            "text": "Create a collection in the vector database.\nCase 1. if the collection does not exist, create the collection.\nCase 2. the collection exists, if overwrite is True, it will overwrite the collection.\nCase 3. the collection exists and overwrite is False, if get_or_create is True, it will get the collection,\notherwise it raise a ValueError.\n\nArguments\n:\n\nReturns\n:\n\nCollection | The collection object."
                        }
                    ],
                    "subsections": []
                },
                {
                    "title": "get_collection\n​",
                    "content": [
                        {
                            "code": {
                                "language": "python",
                                "script": "def\nget_collection\n(\ncollection_name\n:\nstr\n=\nNone\n)\n-\n>\nCollection"
                            }
                        },
                        {
                            "text": "Get the collection from the vector database.\n\nArguments\n:\n\nReturns\n:\n\nCollection | The collection object."
                        }
                    ],
                    "subsections": []
                },
                {
                    "title": "delete_collection\n​",
                    "content": [
                        {
                            "code": {
                                "language": "python",
                                "script": "def\ndelete_collection\n(\ncollection_name\n:\nstr\n)\n-\n>\nNone"
                            }
                        },
                        {
                            "text": "Delete the collection from the vector database.\n\nArguments\n:\n\nReturns\n:\n\nNone"
                        }
                    ],
                    "subsections": []
                },
                {
                    "title": "insert_docs\n​",
                    "content": [
                        {
                            "code": {
                                "language": "python",
                                "script": "def\ninsert_docs\n(\ndocs\n:\nList\n[\nDocument\n]\n,\ncollection_name\n:\nstr\n=\nNone\n,\nupsert\n:\nbool\n=\nFalse\n)\n-\n>\nNone"
                            }
                        },
                        {
                            "text": "Insert documents into the collection of the vector database.\n\nArguments\n:\n\nReturns\n:\n\nNone"
                        }
                    ],
                    "subsections": []
                },
                {
                    "title": "update_docs\n​",
                    "content": [
                        {
                            "code": {
                                "language": "python",
                                "script": "def\nupdate_docs\n(\ndocs\n:\nList\n[\nDocument\n]\n,\ncollection_name\n:\nstr\n=\nNone\n)\n-\n>\nNone"
                            }
                        },
                        {
                            "text": "Update documents in the collection of the vector database.\n\nArguments\n:\n\nReturns\n:\n\nNone"
                        }
                    ],
                    "subsections": []
                },
                {
                    "title": "delete_docs\n​",
                    "content": [
                        {
                            "code": {
                                "language": "python",
                                "script": "def\ndelete_docs\n(\nids\n:\nList\n[\nItemID\n]\n,\ncollection_name\n:\nstr\n=\nNone\n,\n**\nkwargs\n)\n-\n>\nNone"
                            }
                        },
                        {
                            "text": "Delete documents from the collection of the vector database.\n\nArguments\n:\n\nReturns\n:\n\nNone"
                        }
                    ],
                    "subsections": []
                },
                {
                    "title": "retrieve_docs\n​",
                    "content": [
                        {
                            "code": {
                                "language": "python",
                                "script": "def\nretrieve_docs\n(\nqueries\n:\nList\n[\nstr\n]\n,\ncollection_name\n:\nstr\n=\nNone\n,\nn_results\n:\nint\n=\n10\n,\ndistance_threshold\n:\nfloat\n=\n-\n1\n,\n**\nkwargs\n)\n-\n>\nQueryResults"
                            }
                        },
                        {
                            "text": "Retrieve documents from the collection of the vector database based on the queries.\n\nArguments\n:\n\nReturns\n:\n\nQueryResults | The query results. Each query result is a list of list of tuples containing the document and\nthe distance."
                        }
                    ],
                    "subsections": []
                },
                {
                    "title": "get_docs_by_ids\n​",
                    "content": [
                        {
                            "code": {
                                "language": "python",
                                "script": "def\nget_docs_by_ids\n(\nids\n:\nList\n[\nItemID\n]\n=\nNone\n,\ncollection_name\n:\nstr\n=\nNone\n,\ninclude\n=\nNone\n,\n**\nkwargs\n)\n-\n>\nList\n[\nDocument\n]"
                            }
                        },
                        {
                            "text": "Retrieve documents from the collection of the vector database based on the ids.\n\nArguments\n:\n\nReturns\n:\n\nList[Document] | The results."
                        }
                    ],
                    "subsections": []
                }
            ]
        }
    ],
    "images": []
}