{
    "url": "https://microsoft.github.io/autogen/blog/2023/12/01/AutoGenStudio",
    "title": "AutoGen Studio: Interactively Explore Multi-Agent Workflows",
    "sections": [
        {
            "title": "",
            "content": [
                {
                    "text": "\n\nAutoGen Studio: Solving a task with multiple agents that generate a pdf\r\ndocument with images.\n\nAutoGen Studio: Solving a task with multiple agents that generate a pdf\r\ndocument with images."
                }
            ],
            "subsections": []
        },
        {
            "title": "TL;DR\n​",
            "content": [
                {
                    "text": "To help you rapidly prototype multi-agent solutions for your tasks, we are introducing AutoGen Studio, an interface powered by\nAutoGen\n. It allows you to:\n\nAutoGen Studio is open source\ncode here\n, and can be installed via pip. Give it a try!"
                },
                {
                    "code": {
                        "language": "bash",
                        "script": "pip install autogenstudio"
                    }
                }
            ],
            "subsections": []
        },
        {
            "title": "Introduction\n​",
            "content": [
                {
                    "text": "The accelerating pace of technology has ushered us into an era where digital assistants (or agents) are becoming integral to our lives.\nAutoGen\nhas emerged as a leading framework for orchestrating the power of agents. In the spirit of expanding this frontier and democratizing this capability, we are thrilled to introduce a new user-friendly interface:\nAutoGen Studio\n.\n\nWith AutoGen Studio, users can rapidly create, manage, and interact with agents that can learn, adapt, and collaborate. As we release this interface into the open-source community, our ambition is not only to enhance productivity but to inspire a level of personalized interaction between humans and agents.\n\nNote\n: AutoGen Studio is meant to help you rapidly prototype multi-agent workflows and demonstrate an example of end user interfaces built with AutoGen. It is not meant to be a production-ready app."
                }
            ],
            "subsections": []
        },
        {
            "title": "Getting Started with AutoGen Studio\n​",
            "content": [
                {
                    "text": "The following guide will help you get AutoGen Studio up and running on your system."
                }
            ],
            "subsections": [
                {
                    "title": "Configuring an LLM Provider\n​",
                    "content": [
                        {
                            "text": "To get started, you need access to a language model. You can get this set up by following the steps in the AutoGen documentation\nhere\n. Configure your environment with either\nOPENAI_API_KEY\nor\nAZURE_OPENAI_API_KEY\n.\n\nFor example, in your terminal, you would set the API key like this:"
                        },
                        {
                            "code": {
                                "language": "bash",
                                "script": "export OPENAI_API_KEY=<your_api_key>"
                            }
                        },
                        {
                            "text": "You can also specify the model directly in the agent's configuration as shown below."
                        },
                        {
                            "code": {
                                "language": "python",
                                "script": "llm_config\n=\nLLMConfig\n(\nconfig_list\n=\n[\n{\n\"model\"\n:\n\"gpt-4\"\n,\n\"api_key\"\n:\n\"<azure_api_key>\"\n,\n\"base_url\"\n:\n\"<azure api base url>\"\n,\n\"api_type\"\n:\n\"azure\"\n,\n\"api_version\"\n:\n\"2024-02-15-preview\"\n}\n]\n,\ntemperature\n=\n0\n,\n)"
                            }
                        }
                    ],
                    "subsections": []
                },
                {
                    "title": "Installation\n​",
                    "content": [
                        {
                            "text": "There are two ways to install AutoGen Studio - from PyPi or from source. We\nrecommend installing from PyPi\nunless you plan to modify the source code.\n\nInstall from PyPi\n\nWe recommend using a virtual environment (e.g., conda) to avoid conflicts with existing Python packages. With Python 3.10 or newer active in your virtual environment, use pip to install AutoGen Studio:"
                        },
                        {
                            "code": {
                                "language": "bash",
                                "script": "pip install autogenstudio"
                            }
                        },
                        {
                            "text": "Install from Source\n\nNote: This approach requires some familiarity with building interfaces in React.\n\nIf you prefer to install from source, ensure you have Python 3.10+ and Node.js (version above 14.15.0) installed. Here's how you get started:\n\nClone the AutoGen Studio repository and install its Python dependencies:"
                        },
                        {
                            "code": {
                                "language": "bash",
                                "script": "pip install -e ."
                            }
                        },
                        {
                            "text": "Navigate to the\nsamples/apps/autogen-studio/frontend\ndirectory, install dependencies, and build the UI:"
                        },
                        {
                            "code": {
                                "language": "bash",
                                "script": "npm install -g gatsby-cli\nnpm install --global yarn\nyarn install\nyarn build"
                            }
                        },
                        {
                            "text": "For Windows users, to build the frontend, you may need alternative commands provided in the\nautogen studio readme\n."
                        }
                    ],
                    "subsections": []
                }
            ]
        },
        {
            "title": "What Can You Do with AutoGen Studio?\n​",
            "content": [
                {
                    "text": "The AutoGen Studio UI is organized into 3 high level sections -\nBuild\n,\nPlayground\n, and\nGallery\n."
                }
            ],
            "subsections": [
                {
                    "title": "Build\n​",
                    "content": [
                        {
                            "text": "\n\nThis section focuses on defining the properties of agents and agent workflows. It includes the following concepts:\n\nSkills\n: Skills are functions (e.g., Python functions) that describe how to solve a task. In general, a good skill has a descriptive name (e.g.\ngenerate_images\n), extensive docstrings and good defaults (e.g., writing out files to disk for persistence and reuse). You can add new skills to AutoGen Studio via the provided UI. At inference time, these skills are made available to the assistant agent as they address your tasks.\n\n\n\nAutoGen Studio Build View: View, add or edit skills that an agent can\r\nleverage in addressing tasks.\n\nAutoGen Studio Build View: View, add or edit skills that an agent can\r\nleverage in addressing tasks.\n\nAgents\n: This provides an interface to declaratively specify properties for an AutoGen agent (mirrors most of the members of a base\nAutoGen conversable agent\nclass).\n\nAgent Workflows\n: An agent workflow is a specification of a set of agents that can work together to accomplish a task. The simplest version of this is a setup with two agents – a user proxy agent (that represents a user i.e. it compiles code and prints result) and an assistant that can address task requests (e.g., generating plans, writing code, evaluating responses, proposing error recovery steps, etc.). A more complex flow could be a group chat where even more agents work towards a solution."
                        }
                    ],
                    "subsections": []
                },
                {
                    "title": "Playground\n​",
                    "content": [
                        {
                            "text": "\n\nAutoGen Studio Playground View: Agents collaborate, use available skills\r\n(ability to generate images) to address a user task (generate pdf's).\n\nAutoGen Studio Playground View: Agents collaborate, use available skills\r\n(ability to generate images) to address a user task (generate pdf's).\n\nThe playground section is focused on interacting with agent workflows defined in the previous build section. It includes the following concepts:\n\nSession\n: A session refers to a period of continuous interaction or engagement with an agent workflow, typically characterized by a sequence of activities or operations aimed at achieving specific objectives. It includes the agent workflow configuration, the interactions between the user and the agents. A session can be “published” to a “gallery”.\n\nChat View\n: A chat is a sequence of interactions between a user and an agent. It is a part of a session."
                        }
                    ],
                    "subsections": []
                }
            ]
        },
        {
            "title": "The AutoGen Studio API\n​",
            "content": [
                {
                    "text": "While AutoGen Studio is a web interface, it is powered by an underlying python API that is reusable and modular. Importantly, we have implemented an API where agent workflows can be declaratively specified (in JSON), loaded and run. An example of the current API is shown below. Please consult the\nAutoGen Studio repo\nfor more details."
                },
                {
                    "code": {
                        "language": "python",
                        "script": "import\njson\nfrom\nautogenstudio\nimport\nAutoGenWorkFlowManager\n,\nAgentWorkFlowConfig\n# load an agent specification in JSON\nagent_spec\n=\njson\n.\nload\n(\nopen\n(\n'agent_spec.json'\n)\n)\n# Create an AutoGen Workflow Configuration from the agent specification\nagent_work_flow_config\n=\nFlowConfig\n(\n**\nagent_spec\n)\n# Create a Workflow from the configuration\nagent_work_flow\n=\nAutoGenWorkFlowManager\n(\nagent_work_flow_config\n)\n# Run the workflow on a task\ntask_query\n=\n\"What is the height of the Eiffel Tower?\"\nagent_work_flow\n.\nrun\n(\nmessage\n=\ntask_query\n)"
                    }
                }
            ],
            "subsections": []
        },
        {
            "title": "Road Map and Next Steps\n​",
            "content": [
                {
                    "text": "As we continue to develop and refine AutoGen Studio, the road map below outlines an array of enhancements and new features planned for future releases. Here's what users can look forward to:"
                }
            ],
            "subsections": []
        },
        {
            "title": "Contribution Guide\n​",
            "content": [
                {
                    "text": "We welcome contributions to AutoGen Studio. We recommend the following general steps to contribute to the project:"
                }
            ],
            "subsections": [
                {
                    "title": "FAQ\n​",
                    "content": [
                        {
                            "text": "Q: Where can I adjust the default skills, agent and workflow configurations?\nA: You can modify agent configurations directly from the UI or by editing the\nautogentstudio/utils/dbdefaults.json\nfile which is used to initialize the database.\n\nQ: If I want to reset the entire conversation with an agent, how do I go about it?\nA: To reset your conversation history, you can delete the\ndatabase.sqlite\nfile. If you need to clear user-specific data, remove the relevant\nautogenstudio/web/files/user/<user_id_md5hash>\nfolder.\n\nQ: Is it possible to view the output and messages generated by the agents during interactions?\nA: Yes, you can view the generated messages in the debug console of the web UI, providing insights into the agent interactions. Alternatively, you can inspect the\ndatabase.sqlite\nfile for a comprehensive record of messages.\n\nQ: Where can I find documentation and support for AutoGen Studio?\nA: We are constantly working to improve AutoGen Studio. For the latest updates, please refer to the\nAutoGen Studio Readme\n. For additional support, please open an issue on\nGitHub\nor ask questions on\nDiscord\n.\n\nQ: Can I use Other Models with AutoGen Studio?\nYes. AutoGen standardizes on the openai model api format, and you can use any api server that offers an openai compliant endpoint. In the AutoGen Studio UI, each agent has an\nllm_config\nfield where you can input your model endpoint details including\nmodel name\n,\napi key\n,\nbase url\n,\nmodel type\nand\napi version\n. For Azure OpenAI models, you can find these details in the Azure portal. Note that for Azure OpenAI, the\nmodel name\nis the deployment id or engine, and the\nmodel type\nis \"azure\".\r\nFor other OSS models, we recommend using a server such as vllm to instantiate an openai compliant endpoint.\n\nQ: The Server Starts But I Can't Access the UI\nA: If you are running the server on a remote machine (or a local machine that fails to resolve localhost correstly), you may need to specify the host address. By default, the host address is set to\nlocalhost\n. You can specify the host address using the\n--host <host>\nargument. For example, to start the server on port 8081 and local address such that it is accessible from other machines on the network, you can run the following command:"
                        },
                        {
                            "code": {
                                "language": "bash",
                                "script": "autogenstudio ui --port 8081 --host 0.0.0.0"
                            }
                        }
                    ],
                    "subsections": []
                }
            ]
        }
    ],
    "images": []
}