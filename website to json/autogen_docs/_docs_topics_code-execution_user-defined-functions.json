{
    "url": "https://microsoft.github.io/autogen/docs/topics/code-execution/user-defined-functions",
    "title": "User Defined Functions",
    "sections": [
        {
            "title": "",
            "content": [
                {
                    "text": "\n\nThis is experimental and not\nyet\nsupported by all executors. At this stage only\nLocalCommandLineCodeExecutor\nis supported.\n\nCurrently, the method of registering tools and using this feature are different. We would like to unify them. See Github issue\nhere\n\nUser defined functions allow you to define Python functions in your\nAutoGen program and then provide these to be used by your executor. This\nallows you to provide your agents with tools without using traditional\ntool calling APIs. Currently only Python is supported for this feature.\n\nThere are several steps involved:"
                }
            ],
            "subsections": []
        },
        {
            "title": "Define the function\n​",
            "content": [
                {
                    "text": "Keep in mind that the entire source code of these functions will be available to the executor. This means that you should not include any sensitive information in the function as an LLM agent may be able to access it.\n\nIf the function does not require any external imports or dependencies\nthen you can simply use the function. For example:"
                },
                {
                    "code": {
                        "language": "python",
                        "script": "def\nadd_two_numbers\n(\na\n:\nint\n,\nb\n:\nint\n)\n-\n>\nint\n:\n\"\"\"Add two numbers together.\"\"\"\nreturn\na\n+\nb"
                    }
                },
                {
                    "text": "This would be a valid standalone function.\n\nUsing type hints and docstrings are not required but are highly recommended. They will help the code writing agent understand the function and how to use it.\n\nIf the function requires external imports or dependencies then you can\nuse the\n@with_requirements\ndecorator to specify the requirements. For\nexample:"
                },
                {
                    "code": {
                        "language": "python",
                        "script": "import\npandas\nfrom\nautogen\n.\ncoding\n.\nfunc_with_reqs\nimport\nwith_requirements\n@with_requirements\n(\npython_packages\n=\n[\n\"pandas\"\n]\n,\nglobal_imports\n=\n[\n\"pandas\"\n]\n)\ndef\nload_data\n(\n)\n-\n>\npandas\n.\nDataFrame\n:\n\"\"\"Load some sample data.\nReturns:\npandas.DataFrame: A DataFrame with the following columns: name(str), location(str), age(int)\n\"\"\"\ndata\n=\n{\n\"name\"\n:\n[\n\"John\"\n,\n\"Anna\"\n,\n\"Peter\"\n,\n\"Linda\"\n]\n,\n\"location\"\n:\n[\n\"New York\"\n,\n\"Paris\"\n,\n\"Berlin\"\n,\n\"London\"\n]\n,\n\"age\"\n:\n[\n24\n,\n13\n,\n53\n,\n33\n]\n,\n}\nreturn\npandas\n.\nDataFrame\n(\ndata\n)"
                    }
                },
                {
                    "text": "If you wanted to rename\npandas\nto\npd\nor import\nDataFrame\ndirectly\nyou could do the following:"
                },
                {
                    "code": {
                        "language": "python",
                        "script": "import\npandas\nas\npd\nfrom\npandas\nimport\nDataFrame\nfrom\npandas\nimport\nDataFrame\nas\ndf\nfrom\nautogen\n.\ncoding\n.\nfunc_with_reqs\nimport\nAlias\n,\nImportFromModule\n,\nwith_requirements\n@with_requirements\n(\npython_packages\n=\n[\n\"pandas\"\n]\n,\nglobal_imports\n=\n[\nAlias\n(\n\"pandas\"\n,\n\"pd\"\n)\n]\n)\ndef\nsome_func1\n(\n)\n-\n>\npd\n.\nDataFrame\n:\n.\n.\n.\n@with_requirements\n(\npython_packages\n=\n[\n\"pandas\"\n]\n,\nglobal_imports\n=\n[\nImportFromModule\n(\n\"pandas\"\n,\n\"DataFrame\"\n)\n]\n)\ndef\nsome_func2\n(\n)\n-\n>\nDataFrame\n:\n.\n.\n.\n@with_requirements\n(\npython_packages\n=\n[\n\"pandas\"\n]\n,\nglobal_imports\n=\n[\nImportFromModule\n(\n\"pandas\"\n,\nAlias\n(\n\"DataFrame\"\n,\n\"df\"\n)\n)\n]\n)\ndef\nsome_func3\n(\n)\n-\n>\ndf\n:\n.\n.\n."
                    }
                }
            ],
            "subsections": []
        },
        {
            "title": "Provide the function to the executor\n​",
            "content": [
                {
                    "text": "Functions can be loaded into the executor in its constructor. For\nexample:"
                },
                {
                    "code": {
                        "language": "python",
                        "script": "from\npathlib\nimport\nPath\nfrom\nautogen\n.\ncoding\nimport\nCodeBlock\n,\nLocalCommandLineCodeExecutor\nwork_dir\n=\nPath\n(\n\"coding\"\n)\nwork_dir\n.\nmkdir\n(\nexist_ok\n=\nTrue\n)\nexecutor\n=\nLocalCommandLineCodeExecutor\n(\nwork_dir\n=\nwork_dir\n,\nfunctions\n=\n[\nadd_two_numbers\n,\nload_data\n]\n)"
                    }
                },
                {
                    "text": "Before we get an agent involved, we can sanity check that when the agent\nwrites code that looks like this the executor will be able to handle it."
                },
                {
                    "code": {
                        "language": "python",
                        "script": "code\n=\nf\"\"\"\nfrom\n{\nLocalCommandLineCodeExecutor\n.\nFUNCTIONS_MODULE\n}\nimport add_two_numbers\nprint(add_two_numbers(1, 2))\n\"\"\"\nprint\n(\nexecutor\n.\nexecute_code_blocks\n(\ncode_blocks\n=\n[\nCodeBlock\n(\nlanguage\n=\n\"python\"\n,\ncode\n=\ncode\n)\n,\n]\n)\n)"
                    }
                },
                {
                    "code": {
                        "language": "text",
                        "script": "exit_code=0 output='3\\n' code_file='/Users/jackgerrits/w/autogen/website/docs/topics/code-execution/coding/tmp_code_1958fe3aea3e8e3c6e907fe951b5f6ab.py'"
                    }
                },
                {
                    "text": "And we can try the function that required a dependency and import too."
                },
                {
                    "code": {
                        "language": "python",
                        "script": "code\n=\nf\"\"\"\nfrom\n{\nLocalCommandLineCodeExecutor\n.\nFUNCTIONS_MODULE\n}\nimport load_data\nprint(load_data())\n\"\"\"\nresult\n=\nexecutor\n.\nexecute_code_blocks\n(\ncode_blocks\n=\n[\nCodeBlock\n(\nlanguage\n=\n\"python\"\n,\ncode\n=\ncode\n)\n,\n]\n)\nprint\n(\nresult\n.\noutput\n)"
                    }
                },
                {
                    "code": {
                        "language": "text",
                        "script": "name  location  age\n0   John  New York   24\n1   Anna     Paris   13\n2  Peter    Berlin   53\n3  Linda    London   33"
                    }
                }
            ],
            "subsections": []
        },
        {
            "title": "Explain to the code writing agent how to use the function\n​",
            "content": [
                {
                    "text": "Now that the function is available to be called by the executor, you can\nexplain to the code writing agent how to use the function. This step is\nvery important as by default it will not know about it.\n\nThere is a utility function that you can use to generate a default\nprompt that describes the available functions and how to use them. This\nfunction can have its template overridden to provide a custom message,\nor you can use a different prompt all together.\n\nFor example, you could extend the system message from the page about\nlocal execution with a new section that describes the functions\navailable."
                },
                {
                    "code": {
                        "language": "python",
                        "script": "nlnl\n=\n\"\\n\\n\"\ncode_writer_system_message\n=\n\"\"\"\nYou have been given coding capability to solve tasks using Python code.\nIn the following cases, suggest python code (in a python coding block) or shell script (in a sh coding block) for the user to execute.\n1. When you need to collect info, use the code to output the info you need, for example, browse or search the web, download/read a file, print the content of a webpage or a file, get the current date/time, check the operating system. After sufficient info is printed and the task is ready to be solved based on your language skill, you can solve the task by yourself.\n2. When you need to perform some task with code, use the code to perform the task and output the result. Finish the task smartly.\nSolve the task step by step if you need to. If a plan is not provided, explain your plan first. Be clear which step uses code, and which step uses your language skill.\nWhen using code, you must indicate the script type in the code block. The user cannot provide any other feedback or perform any other action beyond executing the code you suggest. The user can't modify your code. So do not suggest incomplete code which requires users to modify. Don't use a code block if it's not intended to be executed by the user.\nIf you want the user to save the code in a file before executing it, put # filename: <filename> inside the code block as the first line. Don't include multiple code blocks in one response. Do not ask users to copy and paste the result. Instead, use 'print' function for the output when relevant. Check the execution result returned by the user.\n\"\"\"\n# Add on the new functions\ncode_writer_system_message\n+=\nexecutor\n.\nformat_functions_for_prompt\n(\n)\nprint\n(\ncode_writer_system_message\n)"
                    }
                },
                {
                    "code": {
                        "language": "text",
                        "script": "You have been given coding capability to solve tasks using Python code.\nIn the following cases, suggest python code (in a python coding block) or shell script (in a sh coding block) for the user to execute.\n1. When you need to collect info, use the code to output the info you need, for example, browse or search the web, download/read a file, print the content of a webpage or a file, get the current date/time, check the operating system. After sufficient info is printed and the task is ready to be solved based on your language skill, you can solve the task by yourself.\n2. When you need to perform some task with code, use the code to perform the task and output the result. Finish the task smartly.\nSolve the task step by step if you need to. If a plan is not provided, explain your plan first. Be clear which step uses code, and which step uses your language skill.\nWhen using code, you must indicate the script type in the code block. The user cannot provide any other feedback or perform any other action beyond executing the code you suggest. The user can't modify your code. So do not suggest incomplete code which requires users to modify. Don't use a code block if it's not intended to be executed by the user.\nIf you want the user to save the code in a file before executing it, put # filename: <filename> inside the code block as the first line. Don't include multiple code blocks in one response. Do not ask users to copy and paste the result. Instead, use 'print' function for the output when relevant. Check the execution result returned by the user.\nYou have access to the following user defined functions. They can be accessed from the module called `functions` by their function names.\nFor example, if there was a function called `foo` you could import it by writing `from functions import foo`\ndef add_two_numbers(a: int, b: int) -> int:\n\"\"\"Add two numbers together.\"\"\"\n...\ndef load_data() -> pandas.core.frame.DataFrame:\n\"\"\"Load some sample data.\nReturns:\npandas.DataFrame: A DataFrame with the following columns: name(str), location(str), age(int)\n\"\"\"\n..."
                    }
                },
                {
                    "text": "Then you can use this system message for your code writing agent."
                },
                {
                    "code": {
                        "language": "python",
                        "script": "import\nos\nfrom\nautogen\nimport\nConversableAgent\ncode_writer_agent\n=\nConversableAgent\n(\n\"code_writer\"\n,\nsystem_message\n=\ncode_writer_system_message\n,\nllm_config\n=\n{\n\"config_list\"\n:\n[\n{\n\"model\"\n:\n\"gpt-4\"\n,\n\"api_key\"\n:\nos\n.\nenviron\n[\n\"OPENAI_API_KEY\"\n]\n}\n]\n}\n,\ncode_execution_config\n=\nFalse\n,\n# Turn off code execution for this agent.\nmax_consecutive_auto_reply\n=\n2\n,\nhuman_input_mode\n=\n\"NEVER\"\n,\n)"
                    }
                },
                {
                    "text": "Now, we can setup the code execution agent using the local command line\nexecutor we defined earlier."
                },
                {
                    "code": {
                        "language": "python",
                        "script": "code_executor_agent\n=\nConversableAgent\n(\nname\n=\n\"code_executor_agent\"\n,\nllm_config\n=\nFalse\n,\ncode_execution_config\n=\n{\n\"executor\"\n:\nexecutor\n,\n}\n,\nhuman_input_mode\n=\n\"NEVER\"\n,\n)"
                    }
                },
                {
                    "text": "Then, we can start the conversation and get the agent to process the\ndataframe we provided."
                },
                {
                    "code": {
                        "language": "python",
                        "script": "chat_result\n=\ncode_executor_agent\n.\ninitiate_chat\n(\ncode_writer_agent\n,\nmessage\n=\n\"Please use the load_data function to load the data and please calculate the average age of all people.\"\n,\nsummary_method\n=\n\"reflection_with_llm\"\n,\n)"
                    }
                },
                {
                    "code": {
                        "language": "text",
                        "script": "code_executor_agent\n(\nto\ncode_writer\n)\n:\nPlease use the load_data function to load the data and please calculate the average age of all people.\n--------------------------------------------------------------------------------\ncode_writer\n(\nto\ncode_executor_agent\n)\n:\nBelow is the python code to load the data using the `load_data()` function and calculate the average age of all people.\n```python\n# python code\nfrom functions import load_data\nimport numpy as np\n# Load the data\ndf = load_data()\n# Calculate the average age\navg_age = np.mean(df['age'])\nprint(\"The average age is\", avg_age)\n```\nThis code starts by importing the `load_data()` function. It then uses this function to load the data into a variable `df`. Afterwards, it calculates the average (mean) of the 'age' column in the DataFrame, before printing the result.\n--------------------------------------------------------------------------------\n>>>>>>>> EXECUTING CODE BLOCK (inferred language is python)...\ncode_executor_agent\n(\nto\ncode_writer\n)\n:\nexitcode: 0 (execution succeeded)\nCode output: The average age is 30.75\n--------------------------------------------------------------------------------\ncode_writer\n(\nto\ncode_executor_agent\n)\n:\nGreat! The code worked fine. So, the average age of all people in the dataset is 30.75 years.\n--------------------------------------------------------------------------------\ncode_executor_agent\n(\nto\ncode_writer\n)\n:\n--------------------------------------------------------------------------------"
                    }
                },
                {
                    "text": "We can see the summary of the calculation:"
                },
                {
                    "code": {
                        "language": "python",
                        "script": "print\n(\nchat_result\n.\nsummary\n)"
                    }
                },
                {
                    "code": {
                        "language": "text",
                        "script": "The average age of all people in the dataset is 30.75 years."
                    }
                }
            ],
            "subsections": []
        }
    ],
    "images": []
}