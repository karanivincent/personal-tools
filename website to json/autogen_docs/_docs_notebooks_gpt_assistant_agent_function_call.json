{
    "url": "https://microsoft.github.io/autogen/docs/notebooks/gpt_assistant_agent_function_call",
    "title": "From Dad Jokes To Sad Jokes: Function Calling with GPTAssistantAgent",
    "sections": [
        {
            "title": "",
            "content": [
                {
                    "text": "\n\nAutogen allows\nGPTAssistantAgent\nto be augmented with “tools” —\npre-defined functions or capabilities — that extend its ability to\nhandle specific tasks, similar to how one might natively utilize tools\nin the\nOpenAI Assistant’s\nAPI\n.\n\nIn this notebook, we create a basic Multi-Agent System using Autogen’s\nGPTAssistantAgent\nto convert Dad jokes on a specific topic into Sad\njokes. It consists of a “Dad” agent which has the ability to search the\nDad Joke API\nand a “Sad Joker” agent\nwhich converts the Dad jokes into Sad jokes. The Sad Joker then writes\nthe sad jokes into a txt file.\n\nIn this process we demonstrate how to call tools and perform function\ncalling for\nGPTAssistantAgent\n."
                }
            ],
            "subsections": []
        },
        {
            "title": "Requirements\n​",
            "content": [
                {
                    "text": "AutoGen requires Python 3.8 or newer. For this notebook, please install\npyautogen\n:"
                },
                {
                    "code": {
                        "language": "python",
                        "script": "pip install pyautogen"
                    }
                },
                {
                    "code": {
                        "language": "text",
                        "script": "Requirement already satisfied: pyautogen in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (0.2.8)\nRequirement already satisfied: openai>=1.3 in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from pyautogen) (1.6.1)\nRequirement already satisfied: diskcache in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from pyautogen) (5.6.3)\nRequirement already satisfied: termcolor in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from pyautogen) (2.4.0)\nRequirement already satisfied: flaml in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from pyautogen) (2.1.1)\nRequirement already satisfied: python-dotenv in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from pyautogen) (1.0.0)\nRequirement already satisfied: tiktoken in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from pyautogen) (0.5.2)\nRequirement already satisfied: pydantic<3,>=1.10 in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from pyautogen) (2.5.3)\nRequirement already satisfied: docker in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from pyautogen) (7.0.0)\nRequirement already satisfied: anyio<5,>=3.5.0 in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from openai>=1.3->pyautogen) (4.2.0)\nRequirement already satisfied: distro<2,>=1.7.0 in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from openai>=1.3->pyautogen) (1.8.0)\nRequirement already satisfied: httpx<1,>=0.23.0 in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from openai>=1.3->pyautogen) (0.26.0)\nRequirement already satisfied: sniffio in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from openai>=1.3->pyautogen) (1.3.0)\nRequirement already satisfied: tqdm>4 in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from openai>=1.3->pyautogen) (4.66.1)\nRequirement already satisfied: typing-extensions<5,>=4.7 in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from openai>=1.3->pyautogen) (4.9.0)\nRequirement already satisfied: annotated-types>=0.4.0 in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from pydantic<3,>=1.10->pyautogen) (0.6.0)\nRequirement already satisfied: pydantic-core==2.14.6 in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from pydantic<3,>=1.10->pyautogen) (2.14.6)\nRequirement already satisfied: packaging>=14.0 in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from docker->pyautogen) (23.2)\nRequirement already satisfied: requests>=2.26.0 in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from docker->pyautogen) (2.31.0)\nRequirement already satisfied: urllib3>=1.26.0 in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from docker->pyautogen) (2.1.0)\nRequirement already satisfied: NumPy>=1.17.0rc1 in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from flaml->pyautogen) (1.26.2)\nRequirement already satisfied: regex>=2022.1.18 in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from tiktoken->pyautogen) (2023.10.3)\nRequirement already satisfied: idna>=2.8 in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from anyio<5,>=3.5.0->openai>=1.3->pyautogen) (3.6)\nRequirement already satisfied: certifi in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from httpx<1,>=0.23.0->openai>=1.3->pyautogen) (2023.11.17)\nRequirement already satisfied: httpcore==1.* in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from httpx<1,>=0.23.0->openai>=1.3->pyautogen) (1.0.2)\nRequirement already satisfied: h11<0.15,>=0.13 in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from httpcore==1.*->httpx<1,>=0.23.0->openai>=1.3->pyautogen) (0.14.0)\nRequirement already satisfied: charset-normalizer<4,>=2 in /Users/justintrugman/.pyenv/versions/3.11.7/lib/python3.11/site-packages (from requests>=2.26.0->docker->pyautogen) (3.3.2)\n[notice] A new release of pip is available: 23.3.2 -> 24.0\n[notice] To update, run: pip install --upgrade pip\nNote: you may need to restart the kernel to use updated packages."
                    }
                },
                {
                    "text": "Import Dependencies"
                },
                {
                    "code": {
                        "language": "python",
                        "script": "from\ntyping\nimport\nAnnotated\n,\nLiteral\nimport\nrequests\nimport\nautogen\nfrom\nautogen\nimport\nUserProxyAgent\nfrom\nautogen\n.\nagentchat\n.\ncontrib\n.\ngpt_assistant_agent\nimport\nGPTAssistantAgent\nfrom\nautogen\n.\nfunction_utils\nimport\nget_function_schema\nconfig_list\n=\nautogen\n.\nconfig_list_from_json\n(\nenv_or_file\n=\n\"OAI_CONFIG_LIST\"\n,\n)"
                    }
                }
            ],
            "subsections": []
        },
        {
            "title": "Creating the Functions\n​",
            "content": [
                {
                    "text": "We need to create functions for our Agents to call.\n\nThis function calls the Dad Joke API with a search term that the agent\ncreates and returns a list of dad jokes."
                },
                {
                    "code": {
                        "language": "python",
                        "script": "def\nget_dad_jokes\n(\nsearch_term\n:\nstr\n,\npage\n:\nint\n=\n1\n,\nlimit\n:\nint\n=\n10\n)\n-\n>\nstr\n:\n\"\"\"\nFetches a list of dad jokes based on a search term.\nParameters:\n- search_term: The search term to find jokes about.\n- page: The page number of results to fetch (default is 1).\n- limit: The number of results to return per page (default is 20, max is 30).\nReturns:\nA list of dad jokes.\n\"\"\"\nurl\n=\n\"https://icanhazdadjoke.com/search\"\nheaders\n=\n{\n\"Accept\"\n:\n\"application/json\"\n}\nparams\n=\n{\n\"term\"\n:\nsearch_term\n,\n\"page\"\n:\npage\n,\n\"limit\"\n:\nlimit\n}\nresponse\n=\nrequests\n.\nget\n(\nurl\n,\nheaders\n=\nheaders\n,\nparams\n=\nparams\n)\nif\nresponse\n.\nstatus_code\n==\n200\n:\ndata\n=\nresponse\n.\njson\n(\n)\njokes\n=\n[\njoke\n[\n\"joke\"\n]\nfor\njoke\nin\ndata\n[\n\"results\"\n]\n]\nreturn\njokes\nelse\n:\nreturn\nf\"Failed to fetch jokes, status code:\n{\nresponse\n.\nstatus_code\n}\n\""
                    }
                },
                {
                    "code": {
                        "language": "python",
                        "script": "# Example Dad Jokes Function Usage:\njokes\n=\nget_dad_jokes\n(\n\"cats\"\n)\nprint\n(\njokes\n)"
                    }
                },
                {
                    "code": {
                        "language": "text",
                        "script": "['Where do cats write notes?\\r\\nScratch Paper!', 'It was raining cats and dogs the other day. I almost stepped in a poodle.', 'What do you call a group of disorganized cats? A cat-tastrophe.', 'I accidentally took my cats meds last night. Don’t ask meow.', 'What do you call a pile of cats?  A Meowtain.', 'Animal Fact #25: Most bobcats are not named bob.']"
                    }
                },
                {
                    "text": "This function allows the Agents to write to a txt file."
                },
                {
                    "code": {
                        "language": "python",
                        "script": "def\nwrite_to_txt\n(\ncontent\n:\nstr\n,\nfilename\n:\nstr\n=\n\"dad_jokes.txt\"\n)\n:\n\"\"\"\nWrites a formatted string to a text file.\nParameters:\n- content: The formatted string to write.\n- filename: The name of the file to write to. Defaults to \"output.txt\".\n\"\"\"\nwith\nopen\n(\nfilename\n,\n\"w\"\n)\nas\nfile\n:\nfile\n.\nwrite\n(\ncontent\n)"
                    }
                },
                {
                    "code": {
                        "language": "python",
                        "script": "# Example Write to TXT Function Usage:\ncontent\n=\n\"\\n\"\n.\njoin\n(\njokes\n)\n# Format the jokes from the above example\nwrite_to_txt\n(\ncontent\n)"
                    }
                }
            ],
            "subsections": []
        },
        {
            "title": "Create Function Schemas\n​",
            "content": [
                {
                    "text": "In order to use the functions within our GPTAssistantAgents, we need to\ngenerate function schemas. This can be done by using\nget_function_schema"
                },
                {
                    "code": {
                        "language": "python",
                        "script": "# Assistant API Tool Schema for get_dad_jokes\nget_dad_jokes_schema\n=\nget_function_schema\n(\nget_dad_jokes\n,\nname\n=\n\"get_dad_jokes\"\n,\ndescription\n=\n\"Fetches a list of dad jokes based on a search term. Allows pagination with page and limit parameters.\"\n,\n)"
                    }
                },
                {
                    "code": {
                        "language": "python",
                        "script": "# Assistant API Tool Schema for write_to_txt\nwrite_to_txt_schema\n=\nget_function_schema\n(\nwrite_to_txt\n,\nname\n=\n\"write_to_txt\"\n,\ndescription\n=\n\"Writes a formatted string to a text file. If the file does not exist, it will be created. If the file does exist, it will be overwritten.\"\n,\n)"
                    }
                },
                {
                    "code": {
                        "language": "text",
                        "script": "The return type of the function 'write_to_txt' is not annotated. Although annotating it is optional, the function should return either a string, a subclass of 'pydantic.BaseModel'."
                    }
                }
            ],
            "subsections": []
        },
        {
            "title": "Creating the Agents\n​",
            "content": [
                {
                    "text": "In this section we create and configure our Dad and Sad Joker Agents"
                }
            ],
            "subsections": [
                {
                    "title": "Set up the User Proxy\n​",
                    "content": [
                        {
                            "code": {
                                "language": "python",
                                "script": "user_proxy\n=\nUserProxyAgent\n(\nname\n=\n\"user_proxy\"\n,\nis_termination_msg\n=\nlambda\nmsg\n:\n\"TERMINATE\"\nin\nmsg\n[\n\"content\"\n]\n,\nhuman_input_mode\n=\n\"NEVER\"\n,\nmax_consecutive_auto_reply\n=\n1\n,\n)"
                            }
                        }
                    ],
                    "subsections": []
                },
                {
                    "title": "The Dad Agent\n​",
                    "content": [
                        {
                            "text": "We create the Dad agent using\nGPTAssistantAgent\n, in order for us to\nenable the Dad to use the\nget_dad_jokes\nfunction we need to provide it\nthe function’s specification in our\nllm_config\n.\n\nWe format the\ntools\nwithin our\nllm_config\nin the same format as\nprovided in the\nOpenAI Assistant tools\ndocs\n."
                        },
                        {
                            "code": {
                                "language": "python",
                                "script": "the_dad\n=\nGPTAssistantAgent\n(\nname\n=\n\"the_dad\"\n,\ninstructions\n=\n\"\"\"\nAs 'The Dad', your primary role is to entertain by fetching dad jokes which the sad joker will transform into 'sad jokes' based on a given theme. When provided with a theme, such as 'plants' or 'animals', your task is as follows:\n1. Use the 'get_dad_jokes' function to search for dad jokes related to the provided theme by providing a search term related to the theme. Fetch a list of jokes that are relevant to the theme.\n2. Present these jokes to the sad joker in a format that is clear and easy to read, preparing them for transformation.\nRemember, the team's goal is to creatively adapt the essence of each dad joke to fit the 'sad joke' format, all while staying true to the theme provided by the user.\n\"\"\"\n,\noverwrite_instructions\n=\nTrue\n,\n# overwrite any existing instructions with the ones provided\noverwrite_tools\n=\nTrue\n,\n# overwrite any existing tools with the ones provided\nllm_config\n=\n{\n\"config_list\"\n:\nconfig_list\n,\n\"tools\"\n:\n[\nget_dad_jokes_schema\n]\n,\n}\n,\n)"
                            }
                        },
                        {
                            "code": {
                                "language": "text",
                                "script": "OpenAI client config of GPTAssistantAgent(the_dad) - model: gpt-4-1106-preview\nMatching assistant found, using the first matching assistant: {'id': 'asst_BLBUwYPugb1UR2jQMGAA7RtU', 'created_at': 1714660644, 'description': None, 'file_ids': [], 'instructions': \"\\n    As 'The Dad', your primary role is to entertain by fetching dad jokes which the sad joker will transform into 'sad jokes' based on a given theme. When provided with a theme, such as 'plants' or 'animals', your task is as follows:\\n\\n    1. Use the 'get_dad_jokes' function to search for dad jokes related to the provided theme by providing a search term related to the theme. Fetch a list of jokes that are relevant to the theme.\\n    2. Present these jokes to the sad joker in a format that is clear and easy to read, preparing them for transformation.\\n\\n    Remember, the team's goal is to creatively adapt the essence of each dad joke to fit the 'sad joke' format, all while staying true to the theme provided by the user.\\n    \", 'metadata': {}, 'model': 'gpt-4-1106-preview', 'name': 'the_dad', 'object': 'assistant', 'tools': [ToolFunction(function=FunctionDefinition(name='get_dad_jokes', description='Fetches a list of dad jokes based on a search term. Allows pagination with page and limit parameters.', parameters={'type': 'object', 'properties': {'search_term': {'type': 'string', 'description': 'search_term'}, 'page': {'type': 'integer', 'default': 1, 'description': 'page'}, 'limit': {'type': 'integer', 'default': 10, 'description': 'limit'}}, 'required': ['search_term']}), type='function')]}"
                            }
                        },
                        {
                            "text": "Next, we register the\nget_dad_jokes\nfunction with the Dad\nGPTAssistantAgent"
                        },
                        {
                            "code": {
                                "language": "python",
                                "script": "# Register get_dad_jokes with the_dad GPTAssistantAgent\nthe_dad\n.\nregister_function\n(\nfunction_map\n=\n{\n\"get_dad_jokes\"\n:\nget_dad_jokes\n,\n}\n,\n)"
                            }
                        }
                    ],
                    "subsections": []
                }
            ]
        },
        {
            "title": "Creating the Groupchat and Starting the Conversation\n​",
            "content": [
                {
                    "text": "Create the groupchat"
                },
                {
                    "code": {
                        "language": "python",
                        "script": "groupchat\n=\nautogen\n.\nGroupChat\n(\nagents\n=\n[\nuser_proxy\n,\nthe_dad\n,\nthe_sad_joker\n]\n,\nmessages\n=\n[\n]\n,\nmax_round\n=\n15\n)\ngroup_chat_manager\n=\nautogen\n.\nGroupChatManager\n(\ngroupchat\n=\ngroupchat\n,\nllm_config\n=\n{\n\"config_list\"\n:\nconfig_list\n}\n)"
                    }
                },
                {
                    "text": "Start the Conversation"
                },
                {
                    "code": {
                        "language": "python",
                        "script": "user_proxy\n.\ninitiate_chat\n(\ngroup_chat_manager\n,\nmessage\n=\n\"Jokes about cats\"\n)"
                    }
                },
                {
                    "code": {
                        "language": "text",
                        "script": "user_proxy\n(\nto\nchat_manager\n)\n:\nJokes about cats\n--------------------------------------------------------------------------------\n>>>>>>>> EXECUTING FUNCTION get_dad_jokes...\nthe_dad\n(\nto\nchat_manager\n)\n:\nHere are some cat-themed dad jokes for the sad joker to transform:\n1. Where do cats write notes? Scratch Paper!\n2. It was raining cats and dogs the other day. I almost stepped in a poodle.\n3. What do you call a group of disorganized cats? A cat-tastrophe.\n4. I accidentally took my cat's meds last night. Don’t ask meow.\n5. What do you call a pile of cats? A Meowtain.\n6. Animal Fact #25: Most bobcats are not named Bob.\n--------------------------------------------------------------------------------\n>>>>>>>> EXECUTING FUNCTION write_to_txt...\nthe_sad_joker\n(\nto\nchat_manager\n)\n:\nThe cat-themed sad jokes have been transformed and saved to a text file named \"sad_cat_jokes.txt\".\n--------------------------------------------------------------------------------\nuser_proxy\n(\nto\nchat_manager\n)\n:\n--------------------------------------------------------------------------------"
                    }
                },
                {
                    "code": {
                        "language": "text",
                        "script": "ChatResult(chat_id=None, chat_history=[{'content': 'Jokes about cats', 'role': 'assistant'}, {'content': \"Here are some cat-themed dad jokes for the sad joker to transform:\\n\\n1. Where do cats write notes? Scratch Paper!\\n2. It was raining cats and dogs the other day. I almost stepped in a poodle.\\n3. What do you call a group of disorganized cats? A cat-tastrophe.\\n4. I accidentally took my cat's meds last night. Don’t ask meow.\\n5. What do you call a pile of cats? A Meowtain.\\n6. Animal Fact #25: Most bobcats are not named Bob.\\n\", 'name': 'the_dad', 'role': 'user'}, {'content': 'The cat-themed sad jokes have been transformed and saved to a text file named \"sad_cat_jokes.txt\".\\n', 'name': 'the_sad_joker', 'role': 'user'}, {'content': '', 'role': 'assistant'}], summary='', cost=({'total_cost': 0.0278, 'gpt-4-1106-preview': {'cost': 0.0278, 'prompt_tokens': 2744, 'completion_tokens': 12, 'total_tokens': 2756}}, {'total_cost': 0.02194, 'gpt-4-1106-preview': {'cost': 0.02194, 'prompt_tokens': 2167, 'completion_tokens': 9, 'total_tokens': 2176}}), human_input=[])"
                    }
                }
            ],
            "subsections": []
        }
    ],
    "images": []
}